<?php
/**
 * WeCodeArt Framework.
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework
 * @subpackage 	Support\Modules\Formatting
 * @copyright   Copyright (c) 2024, WeCodeArt Framework
 * @since 		6.3.0
 * @version		6.3.7
 */

namespace WeCodeArt\Support\Modules;

defined( 'ABSPATH' ) || exit;

use WeCodeArt\Singleton;
use WeCodeArt\Integration;
use WeCodeArt\Config\Traits\Asset;
use WeCodeArt\Conditional\Traits\No_Conditionals;
use function WeCodeArt\Functions\get_prop;
use function WeCodeArt\Functions\toJSON;

/**
 * The Formatting object.
 */
final class Formatting implements Integration {

    use Asset;
    use Singleton;
	use No_Conditionals;

	/**
	 * Send to Constructor
	 */
	public function register_hooks() {
		// Register styles component.
		wecodeart( 'styles' )->Components->register( 'formatting', 	Formatting\Styles::class );
		wecodeart( 'styles' )->Components->register( 'tooltip', 	Formatting\Styles\Tooltip::class );
		wecodeart( 'styles' )->Components->register( 'popover', 	Formatting\Styles\Popover::class );

		// Enqueue assets hooks.
		\add_action( 'wp_enqueue_scripts', 					[ $this, 'frontend_assets'		], 20, 1 );
		\add_action( 'enqueue_block_editor_assets',			[ $this, 'editor_assets' 		], 20, 1 );

		// Default text decoration styles.
		\add_filter( 'wecodeart/filter/gutenberg/settings',	[ $this, 'decoration_styles'	], 20, 2 );

		// Decode url encoded options.
		\add_filter( 'render_block', 						[ $this, 'render_block' 		], 20, 1 );
	}

	/**
	 * Filter render.
	 *
	 * @return  string
	 */
	public function render_block( $content = '' ): string {
		if( str_contains( $content, 'has-decoration' ) ) {
			\wecodeart( 'styles' )->Components->load( [ 'formatting' ] );
		}

		if ( strpos( $content, 'has-popper' ) === false ) {
			return $content;
		}
		
		\wecodeart( 'styles' )->Components->load( [ 'formatting', 'tooltip', 'popover' ] );

		if( function_exists( 'wp_enqueue_script_module' ) ) {
			\wp_enqueue_script_module( '@wecodeart/tooltip' );
		}

		// Use a regular expression to find all instances of 'data-wp-context'
		$pattern = '/data-wp-context="([^"]*)"[^>]*class="[^"]*has-popper[^"]*"/';
		// ...or look into deprecated 'data-options'.
		if ( strpos( $content, 'data-wp-context="' ) === false ) {
			$pattern = '/data-options="([^"]*)"[^>]*class="[^"]*has-popper[^"]*/';
		}

		// Replace callback function.
		$callback = function( $matches ) {
			$decoded 	= urldecode( $matches[1] );
			$json 		= json_decode( $decoded, true );
			
			if ( json_last_error() === JSON_ERROR_NONE ) {
				$_plugin = get_prop( $json, [ '_plugin' ], 'tooltip' );
				unset( $json['plugin'] );
				$encoded = toJSON( $json );

				if( $_plugin === 'popover' && function_exists( 'wp_enqueue_script_module' ) ) {
					\wp_enqueue_script_module( '@wecodeart/popover' );
				}

				$triggers = explode( ' ', get_prop( $json, [ 'trigger' ], 'hover focus' ) );
				
				$replace_with = [ 'data-wp-context="' . esc_attr( $encoded ) . '"', 'data-wp-interactive="wecodeart/' . esc_attr( $_plugin ) . '"' ];
				$replace_with[] = 'data-wp-init="callbacks.validateConfig"';

				if( in_array( 'click', $triggers, true ) ) {
					$replace_with[] = 'data-wp-on--click="actions.toggle"';
				} elseif( ! in_array( 'manual', $triggers, true ) ) {
					if( in_array( 'hover', $triggers, true ) ) {
						$replace_with[] = 'data-wp-on--mouseenter="actions.enter"';
						$replace_with[] = 'data-wp-on--mouseleave="actions.leave"';
					}

					if( in_array( 'focus', $triggers, true ) ) {
						$replace_with[] = 'data-wp-on--focusin="actions.enter"';
						$replace_with[] = 'data-wp-on--focusout="actions.leave"';
					}
				}

				$replace_with[] = 'class="has-popper"';
				$replace_with[] = 'tabindex="0"';

				return join( ' ', $replace_with );
			}

			return $matches[0];
		};

		// Config defaults.
		wp_interactivity_config( 'wecodeart/tooltip', [
			'isEnabled'	=> true,
			'boundary' 	=> 'clippingParents',
			'placement'	=> 'top',
			'fallbackPlacements' => ['top', 'right', 'bottom', 'left'],
			'offset' 	=> [6],
			'delay' 	=> 0,
			'animation' => true,
			'container' => false,
			'html' 		=> false,
			'sanitize' 	=> true,
			'sanitizeFn' => null,
			'selector' 	=> false,
			'template' 	=> '<div class="wp-tooltip" role="tooltip"><div class="wp-tooltip__arrow"></div><div class="wp-tooltip__inner"></div></div>',
			'className' => '',
			'title' 	=> '',
			'trigger' 	=> 'hover focus'
		] );

		// Do the initial replacement.
		return preg_replace_callback( $pattern, $callback, $content );
	}

	/**
	 * Frontend only.
	 *
	 * @return  void
	 */
	public function frontend_assets(): void {
		// Modules
		if( ! function_exists( 'wp_register_script_module' ) ) {
			return;
		}

		\wp_register_script_module(
			'@wecodeart/tooltip',
			$this->get_asset( 'js', 'module' ),
			[ '@wordpress/interactivity' ],
			wecodeart( 'version' )
		);
	}

	/**
	 * Editor only.
	 *
	 * @return  void
	 */
	public function editor_assets(): void {
		wp_enqueue_style(
			$this->make_handle(),
			$this->get_asset( 'css', 'index' ),
			[],
			wecodeart( 'version' )
		);

		wp_enqueue_script(
			$this->make_handle(),
			$this->get_asset( 'js', 'index' ),
			[ 'wecodeart-gutenberg' ],
			wecodeart( 'version' )
		);

		wp_set_script_translations( $this->make_handle(), 'wecodeart', wecodeart_config( 'directories' )['languages'] );
	}

	/**
	 * Add new block editor settings for custom classes.
	 *
	 * @param array  $settings 	The editor settings.
	 * @param object $post 		The post being edited.
	 *
	 * @return array Returns updated editors classes suggestions.
	 */
	public function decoration_styles( array $settings, $post ): array {
		if ( ! isset( $settings[ 'decorationStyles' ] ) ) {
			$settings['decorationStyles'] = apply_filters( 'wecodeart/filter/gutenberg/settings/decoration', [
				[
					'label' => __( 'Underline', 'wecodeart' ),
					'value' => 'underline',
				],
				[
					'label' => __( 'Brush', 'wecodeart' ),
					'value' => 'brush',
				],
				[
					'label' => __( 'Brush - Secondary', 'wecodeart' ),
					'value' => 'brush-secondary',
				],
				[
					'label' => __( 'Pencil', 'wecodeart' ),
					'value' => 'pencil',
				],
				[
					'label' => __( 'Lines', 'wecodeart' ),
					'value' => 'lines',
				],
				[
					'label' => __( 'Lines - Secondary', 'wecodeart' ),
					'value' => 'lines-secondary',
				],
				[
					'label' => __( 'Oval', 'wecodeart' ),
					'value' => 'oval',
				],
				[
					'label' => __( 'Oval - Secondary', 'wecodeart' ),
					'value' => 'oval-secondary',
				],
				[
					'label' => __( 'Oval - Tertiary', 'wecodeart' ),
					'value' => 'oval-tertiary',
				],
				[
					'label' => __( 'Marker', 'wecodeart' ),
					'value' => 'marker',
				]
			], $post );
		}

		return $settings;
	}

	/**
	 * Get File
	 *
	 * @return string
	 */
	public static function get_asset( string $type, string $name ): string {
		$file_path = wecodeart_if( 'is_dev_mode' ) ? 'unminified' : 'minified';
		$file_name = wecodeart_if( 'is_dev_mode' ) ? $name . '.' . $type :  $name . '.min.' . $type;
		$file_path = wecodeart_config( 'paths' )['uri'] . '/inc/support/modules/formatting/assets/' . $file_path . '/' . $type . '/' . $file_name;

		return esc_url( $file_path );
	}
}